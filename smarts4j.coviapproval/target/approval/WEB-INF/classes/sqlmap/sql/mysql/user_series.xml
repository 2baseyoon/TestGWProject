<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user.series">
	<select id="selectSeriesListData" parameterType="cmap" resultType="cmap">
			SELECT A.SeriesCode AS "SeriesCode"
				 , A.SeriesName AS "SeriesName"
				 , A.SeriesDescription AS "SeriesDescription"
				 , A.SFCode AS "SFCode"
				 , A.KeepPeriod AS "KeepPeriod"
				 , A.KeepPeriodTxt AS "KeepPeriodTxt"
				 , A.KeepPeriodReason AS "KeepPeriodReason"
				 , A.KeepMethod AS "KeepMethod"
				 , A.KeepMethodTxt AS "KeepMethodTxt"
				 , A.KeepPlace AS "KeepPlace"
				 , A.KeepPlaceTxt AS "KeepPlaceTxt"
				 , A.ApplyDate AS "ApplyDate"
				 , A.JobType AS "JobType"
				 , A.JobTypeTxt AS "JobTypeTxt"
				 , A.DeptCode AS "DeptCode"
				 , A.DeptName AS "DeptName"
				 , A.MAPPINGID AS "MappingID"
				 , A.BaseYear AS "BaseYear"
				 , A.UnitTaskType AS "UnitTaskType"
				 , A.UnitTaskTypeTxt AS "UnitTaskTypeTxt"				 
			FROM (
				SELECT	  GS.SeriesCode
						, GS.SeriesName
						, GS.SeriesDescription
						, GS.SFCode
						, GS.KeepPeriod
						, SBC_KeepPeriod.CodeName AS KeepPeriodTxt
						, GS.KeepPeriodReason
						, GS.KeepMethod
						, SBC_KeepMethod.CodeName AS KeepMethodTxt
						, GS.KeepPlace
						, SBC_KeepPlace.CodeName AS KeepPlaceTxt
						, GSM.ApplyDate
						, GSM.JobType
						, CASE GSM.JobType WHEN '1' THEN '신설'
										  WHEN '2' THEN '폐지'
										  WHEN '3' THEN '변경'
										  ELSE ''
						  END AS JobTypeTxt
						, GS.BaseYear
						, GSM.DeptCode
						, GSM.DeptName
						, GSM.MAPPINGID
					    , SUBSTR(GS.SeriesCode, 1, 2) AS UnitTaskType
    					, SBC_UnitTaskType.CodeName AS UnitTaskTypeTxt
				FROM covi_approval4j.gov_series GS
				LEFT OUTER JOIN covi_approval4j.gov_series_MAPPING GSM ON GSM.SeriesCode = GS.SeriesCode AND GS.BaseYear = GSM.BaseYear
				LEFT OUTER JOIN covi_smart4j.sys_base_code SBC_UnitTaskType ON SUBSTR(GSM.SeriesCode, 1, 2) = SBC_UnitTaskType.Code AND SBC_UnitTaskType.CodeGroup = 'UnitTaskType' AND SBC_UnitTaskType.IsUse = 'Y'
				LEFT OUTER JOIN covi_smart4j.sys_base_code SBC_KeepPeriod ON GS.KeepPeriod = SBC_KeepPeriod.Code AND SBC_KeepPeriod.CodeGroup = 'KeepPeriod' AND SBC_KeepPeriod.IsUse = 'Y'
				LEFT OUTER JOIN covi_smart4j.sys_base_code SBC_KeepMethod ON GS.KeepMethod = SBC_KeepMethod.Code AND SBC_KeepMethod.CodeGroup = 'KeepMethod' AND SBC_KeepMethod.IsUse = 'Y'
				LEFT OUTER JOIN covi_smart4j.sys_base_code SBC_KeepPlace ON GS.KeepPlace = SBC_KeepPlace.Code AND SBC_KeepPlace.CodeGroup = 'KeepPlace' AND SBC_KeepPlace.IsUse = 'Y'
			) A
			<!-- 검색 데이터 Where 절 -->
			<trim prefix="WHERE" prefixOverrides="AND |OR ">
				<if test="seriesName != null and seriesName != ''">
					AND A.SeriesName LIKE CONCAT('%', #{seriesName} , '%')
				</if>
				<if test="seriesCode != null and seriesCode !=''">
					AND A.SeriesCode = #{seriesCode}
				</if>
				<if test="sfCode != null and sfCode !=''">
					AND A.SFCode = #{sfCode}
				</if>
				<if test="deptCode != null and deptCode !=''">
					AND A.DeptCode = #{deptCode}
				</if>
				<if test="keepPeriod != null and keepPeriod !=''">
					AND A.KeepPeriod = #{keepPeriod}
				</if>
				<if test="revokeStatus != null and revokeStatus !=''">
					AND A.JobType = #{revokeStatus}
				</if>
				<if test="baseYear != null and baseYear !=''">
					AND A.BaseYear = #{baseYear}
				</if>
				<if test="searchType != null and searchType !='' and searchWord != null and searchWord !=''">
					<choose>
						<when test="searchType == 'Code'">
							AND A.SeriesCode LIKE CONCAT('%', #{searchWord} , '%')
						</when>
						<when test="searchType == 'Name'">
							AND A.SeriesName LIKE CONCAT('%', #{searchWord} , '%')
						</when>
						<otherwise>
							AND (
								 A.SeriesCode LIKE CONCAT('%', #{searchWord} , '%')
								OR A.SeriesName LIKE CONCAT('%', #{searchWord} , '%')
							)
						</otherwise>
					</choose>
				</if>
			</trim>
			<!-- Order by 절 -->
			<trim prefix="ORDER BY" prefixOverrides=",">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("SeriesCode")'>SeriesCode</when>
					<when test='sortColumn.equalsIgnoreCase("SeriesName")'>SeriesName</when>
					<when test='sortColumn.equalsIgnoreCase("SeriesDescription")'>SeriesDescription</when>
					<when test='sortColumn.equalsIgnoreCase("DeptName")'>DeptName</when>
					<when test='sortColumn.equalsIgnoreCase("KeepPeriodTxt")'>KeepPeriodTxt</when>
					<when test='sortColumn.equalsIgnoreCase("KeepPeriodReason")'>KeepPeriodReason</when>
					<when test='sortColumn.equalsIgnoreCase("KeepMethodTxt")'>KeepMethodTxt</when>
					<when test='sortColumn.equalsIgnoreCase("KeepPlaceTxt")'>KeepPlaceTxt</when>
					<when test='sortColumn.equalsIgnoreCase("JobTypeTxt")'>JobTypeTxt</when>					
					<otherwise>ApplyDate</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</trim>
			<!-- paging query
	    	LIMIT {가져오는 로우수} OFFSET {몇번째 로우부터인지}
	     	-->
	    	<if test="pageSize != null and pageOffset != null">
	   			LIMIT #{pageSize} OFFSET #{pageOffset}
	   		</if>
	</select>
	
	<select id="selectSeriesListDataCnt" parameterType="cmap" resultType="java.lang.Long">
		SELECT COUNT(*) FROM (
			SELECT A.SeriesCode AS "SeriesCode"
				 , A.SeriesName AS "SeriesName"
				 , A.SeriesDescription AS "SeriesDescription"
				 , A.KeepPeriod AS "KeepPeriod"
				 , A.KeepPeriodReason AS "KeepPeriodReason"
				 , A.KeepMethod AS "KeepMethod"
				 , A.KeepPlace AS "KeepPlace"
				 , A.ApplyDate AS "ApplyDate"
				 , A.JobType AS "JobType"
				 , A.DeptCode AS "DeptCode"
				 , A.DeptName AS "DeptName"
			FROM (
				SELECT	  GS.SeriesCode
						, GS.SeriesName
						, GS.SeriesDescription
						, GS.SFCode
						, GS.KeepPeriod
						, GS.KeepPeriodReason
						, GS.KeepMethod
						, GS.KeepPlace
						, GSM.ApplyDate
						, GSM.JobType
						, GS.BaseYear
						, GSM.DeptCode
						, GSM.DeptName
				FROM covi_approval4j.gov_series GS
				LEFT OUTER JOIN covi_approval4j.gov_series_MAPPING GSM ON GSM.SeriesCode = GS.SeriesCode AND GS.BaseYear = GSM.BaseYear
			) A
			<!-- 검색 데이터 Where 절 -->
			<trim prefix="WHERE" prefixOverrides="AND |OR ">
				<if test="seriesName != null and seriesName != ''">
					AND A.SeriesName LIKE CONCAT('%', #{seriesName} , '%')
				</if>
				<if test="seriesCode != null and seriesCode !=''">
					AND A.SeriesCode = #{seriesCode}
				</if>
				<if test="sfCode != null and sfCode !=''">
					AND A.SFCode = #{sfCode}
				</if>
				<if test="deptCode != null and deptCode !=''">
					AND A.DeptCode = #{deptCode}
				</if>
				<if test="keepPeriod != null and keepPeriod !=''">
					AND A.KeepPeriod = #{keepPeriod}
				</if>
				<if test="revokeStatus != null and revokeStatus !=''">
					AND A.JobType = #{revokeStatus}
				</if>
				<if test="baseYear != null and baseYear !=''">
					AND A.BaseYear = #{baseYear}
				</if>
				<if test="searchType != null and searchType !='' and searchWord != null and searchWord !=''">
					<choose>
						<when test="searchType == 'Code'">
							AND A.SeriesCode LIKE CONCAT('%', #{searchWord} , '%')
						</when>
						<when test="searchType == 'Name'">
							AND A.SeriesName LIKE CONCAT('%', #{searchWord} , '%')
						</when>
						<otherwise>
							AND (
								 A.SeriesCode LIKE CONCAT('%', #{searchWord} , '%')
								OR A.SeriesName LIKE CONCAT('%', #{searchWord} , '%')
							)
						</otherwise>
					</choose>
				</if>
			</trim>
		) A
	</select>
	
	<select id="selectBaseYearList" parameterType="cmap" resultType="cmap">
		SELECT DISTINCT (BaseYear) AS "BaseYear" 
		FROM covi_approval4j.gov_series
		WHERE BaseYear >= DATE_FORMAT(now(), '%Y')-10
		ORDER BY BaseYear ASC
	</select>
	
	<!-- 관리자 여부 확인 -->
	<select id="selectGroupMemberList" parameterType="cmap" resultType="int">
		SELECT COUNT(*)
		FROM (
			SELECT 'User' AS Type
					, GM.UserCode AS Code
					, NVL(UR.DisplayName, '') AS CodeName
					, NVL(UR.MailAddress, '') AS MailAddress
					, GM.GroupMemberID AS MemberID
			FROM covi_smart4j.sys_object_group_MEMBER GM
			LEFT JOIN covi_smart4j.sys_object_user UR ON GM.UserCode = UR.UserCode
			WHERE GM.GroupCode = 'RecordAdmin' OR GM.GroupCode = 'RecordDeptAdmin'
			UNION 
			SELECT 'Dept' AS Type
					, GM.MemberGroupCode AS Code
					, NVL(GR.DisplayName, '') AS CodeName
					, NVL(GR.PrimaryMail, '') AS MailAddress
					, GM.MemberGroupID AS MemberID
			FROM covi_smart4j.sys_object_group_MEMBERGROUP GM
			LEFT JOIN covi_smart4j.sys_object_group GR ON GM.MemberGroupCode = GR.GroupCode
			WHERE GM.GroupCode = 'RecordAdmin' OR GM.GroupCode = 'RecordDeptAdmin'
		) A 
		WHERE Code = #{UserCode}
	</select>
	
	<select id="getSubDeptList" parameterType="cmap" resultType="cmap">
		SELECT GroupID AS "GroupID"
			 , GroupCode AS "GroupCode"
			 , CompanyCode AS "CompanyCode"
			 , GroupType AS "GroupType"
			 , MemberOf AS "MemberOf"
			 , DisplayName AS "DisplayName"
			 , MultiDisPlayName AS "MultiDisPlayName"
			 , Fn_BaseGetDictionary_S(#{lang}, MultiDisPlayName) AS "TransMultiDisplayName"
			 , LENGTH(SortPath) - LENGTH(REPLACE(SortPath, ';', '')) AS "SortDepth"
		FROM covi_smart4j.sys_object_group
		WHERE 1=1
		<if test='isAdmin neq "Y"'>
			AND GroupCode = #{DEPTIDORI} OR MemberOf = #{DEPTIDORI}
		</if>
		AND GroupType IN ('Dept', 'Company') 
		AND GroupPath LIKE CONCAT('ORGROOT;', #{CompanyCode} , '%')
		AND IsUse = 'Y'
		AND IsDisplay = 'Y'
		AND MemberOf != 'NOUSE'
		ORDER BY SortPath ASC
	</select>
	
	<select id="getFunctionLevelList1" parameterType="cmap" resultType="cmap">
		select FUNCTIONCODE AS "functioncode"
		,FUNCTIONNAME AS "functionname" 
		from covi_approval4j.gov_series_FUNC 
		where functionlevel=1 order by sort
	</select>	
	
	<select id="getFunctionLevelList2" parameterType="cmap" resultType="cmap">
		select FUNCTIONCODE AS "functioncode"
		,FUNCTIONNAME AS "functionname" 
		from covi_approval4j.gov_series_FUNC 
		where functionlevel=2
		and PARENTFUNCTIONCODE=#{functioncode}
	</select>		
	
	<select id="getFunctionLevelList3" parameterType="cmap" resultType="cmap">
		select FUNCTIONCODE AS "functioncode"
		,FUNCTIONNAME AS "functionname" 
		from covi_approval4j.gov_series_FUNC 
		where functionlevel=3
		and PARENTFUNCTIONCODE=#{functioncode}
	</select>		
	
	<select id="selectSeriesSearchList" parameterType="cmap" resultType="cmap">
			SELECT DISTINCT A.SeriesCode AS "SeriesCode"
				 		  , A.SeriesName AS "SeriesName"
				 		  , A.DeptCode AS "DeptCode"
	    				  , A.DeptName AS "DeptName"
			FROM (
				SELECT	  GS.SeriesCode
						, GS.SeriesName
						, GS.BaseYear
						, GSM.DeptCode
						, GSM.DeptName
				FROM covi_approval4j.gov_series GS
				LEFT OUTER JOIN covi_approval4j.gov_series_MAPPING GSM ON GSM.SeriesCode = GS.SeriesCode AND GS.BaseYear = GSM.BaseYear
				WHERE GSM.JobType != '2'
			) A
			<!-- 검색 데이터 Where 절 -->
			<trim prefix="WHERE" prefixOverrides="AND |OR ">
				<if test="deptCode != null and deptCode != ''">
					AND (A.DeptCode = #{deptCode} OR A.DeptCode = 'Total' OR A.DeptCode = '001')				</if>
				<if test="baseYear != null and baseYear != ''">
					AND A.BaseYear = #{baseYear}
				</if>
				<if test="searchWord != null and searchWord != ''">
					AND A.SeriesName LIKE CONCAT('%', #{searchWord} , '%')
				</if>
			</trim>
			<!-- Order by 절 -->
			<trim prefix="ORDER BY" prefixOverrides=",">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("SeriesName")'>SeriesName</when>
					<otherwise>SeriesCode</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("DESC")'> DESC</when>
					<otherwise> ASC</otherwise>
				</choose>
			</trim>
			<!-- paging query
	    	LIMIT {가져오는 로우수} OFFSET {몇번째 로우부터인지}
	     	-->
	    	<if test="pageSize != null and pageOffset != null">
	   			LIMIT #{pageSize} OFFSET #{pageOffset}
	   		</if>
	</select>
	
	<select id="selectSeriesSearchListCnt" parameterType="cmap" resultType="java.lang.Long">
		SELECT COUNT(*)
		FROM(
			SELECT DISTINCT A.SeriesCode AS "SeriesCode"
				 		  , A.SeriesName AS "SeriesName"
			FROM (
				SELECT	  GS.SeriesCode
						, GS.SeriesName
						, GS.BaseYear
						, GSM.DeptCode
				FROM covi_approval4j.gov_series GS
				LEFT OUTER JOIN covi_approval4j.gov_series_MAPPING GSM ON GSM.SeriesCode = GS.SeriesCode AND GS.BaseYear = GSM.BaseYear
				WHERE GSM.JobType != '2'
			) A
			<!-- 검색 데이터 Where 절 -->
			<trim prefix="WHERE" prefixOverrides="AND |OR ">
				<if test="deptCode != null and deptCode != ''">
					AND (A.DeptCode = #{deptCode} OR A.DeptCode = 'Total' OR A.DeptCode = '001')				</if>
				<if test="baseYear != null and baseYear != ''">
					AND A.BaseYear = #{baseYear}
				</if>
				<if test="searchWord != null and searchWord != ''">
					AND A.SeriesName LIKE CONCAT('%', #{searchWord} , '%')
				</if>
			</trim>
		) A
	</select>
	
	<select id="selectSeriesSearchTreeData" parameterType="cmap" resultType="cmap">
		SELECT A.SFCode AS "SFCode"
			 , A.SFName AS "SFName"
			 , A.SFParentCode AS "SFParentCode"
			 , A.SFLevel AS "SFLevel"
		FROM (
			SELECT	  GS.SeriesCode AS SFCode
					, GS.SeriesName AS SFName
					, GS.SFCode AS SFParentCode
					, '4' AS SFLevel
			FROM covi_approval4j.gov_series GS
			WHERE 1 = 1 
			AND GS.JOBTYPE != '2'
			<if test="baseYear != null and baseYear != ''">
				AND GS.BaseYear = #{baseYear}
			</if>
		
			UNION
			
			SELECT	  GSF.FunctionCode AS SFCode
					, GSF.FunctionName AS SFName
					, GSF.ParentFunctionCode AS SFParentCode
					, GSF.FunctionLevel AS SFLevel
			FROM covi_approval4j.gov_series_FUNC GSF
		) A
	</select>
	
	<select id="selectSeriesFunctionListData" parameterType="cmap" resultType="cmap">
			SELECT A.FunctionCode AS "FunctionCode"
				 , A.FunctionName AS "FunctionName"
				 , A.FunctionLevel AS "FunctionLevel"
				 , A.ParentFunctionCode AS "ParentFunctionCode"
				 , A.ParentFunctionName AS "ParentFunctionName"
				 , A.FunctionLevelTxt AS "FunctionLevelTxt"
				 , A.Sort AS "Sort"
			FROM (
				SELECT	  GSF.FunctionCode
						, GSF.FunctionName
						, GSF.FunctionLevel
						, GSF.ParentFunctionCode
            			, GSF_P.FunctionName AS ParentFunctionName
						, CASE GSF.FunctionLevel WHEN '1' THEN '대'
											 WHEN '2' THEN '중'
											 WHEN '3' THEN '소'
						  ELSE ''
						  END AS FunctionLevelTxt
						, GSF.Sort
				FROM covi_approval4j.gov_series_FUNC GSF
				LEFT OUTER JOIN covi_approval4j.gov_series_FUNC GSF_P ON GSF.ParentFunctionCode = GSF_P.FunctionCode
				ORDER BY GSF.FunctionLevel, GSF.Sort
			) A
			<!-- 검색 데이터 Where 절 -->
			<trim prefix="WHERE" prefixOverrides="AND |OR ">
				<if test="searchType != null and searchType !='' and searchWord != null and searchWord !=''">
					<choose>
						<when test="searchType == 'Code'">
							AND A.FunctionCode LIKE CONCAT('%', #{searchWord} , '%')
						</when>
						<when test="searchType == 'Name'">
							AND A.FunctionName LIKE CONCAT('%', #{searchWord} , '%')
						</when>
						<otherwise>
							AND (
								A.FunctionCode LIKE CONCAT('%', #{searchWord} , '%')
								OR A.FunctionName LIKE CONCAT('%', #{searchWord} , '%')
							)
						</otherwise>
					</choose>
				</if>
				<if test="FunctionLevel != null and FunctionLevel !=''">
					AND A.FunctionLevel = #{FunctionLevel}
				</if>
			</trim>
			ORDER BY A.FunctionLevel, A.Sort ASC
			<!-- paging query
	    	LIMIT {가져오는 로우수} OFFSET {몇번째 로우부터인지}
	     	-->
	    	<if test="pageSize != null and pageOffset != null">
	   		LIMIT #{pageSize} OFFSET #{pageOffset}
	   		</if>
	</select>
	
	<select id="selectSeriesFunctionListDataCnt" parameterType="cmap" resultType="java.lang.Long">
		SELECT COUNT(*)
			FROM (
				SELECT	  FunctionCode
						, FunctionName
						, FunctionLevel
						, ParentFunctionCode
						, CASE FunctionLevel WHEN '1' THEN '대'
											 WHEN '2' THEN '중'
											 WHEN '3' THEN '소'
						  ELSE ''
						  END AS FunctionLevelTxt
				FROM covi_approval4j.gov_series_FUNC GSF
			) A
			<!-- 검색 데이터 Where 절 -->
			<trim prefix="WHERE" prefixOverrides="AND |OR ">
				<if test="searchType != null and searchType !='' and searchWord != null and searchWord !=''">
					<choose>
						<when test="searchType == 'Code'">
							AND A.FunctionCode LIKE CONCAT('%', #{searchWord} , '%')
						</when>
						<when test="searchType == 'Name'">
							AND A.FunctionName LIKE CONCAT('%', #{searchWord} , '%')
						</when>
						<otherwise>
							AND (
								A.FunctionCode LIKE CONCAT('%', #{searchWord} , '%')
								OR A.FunctionName LIKE CONCAT('%', #{searchWord} , '%')
							)
						</otherwise>
					</choose>
				</if>
				<if test="FunctionLevel != null and FunctionLevel !=''">
					AND A.FunctionLevel = #{FunctionLevel}
				</if>
			</trim>
	</select>

	<insert id="insertSeriesData" parameterType="cmap">
		INSERT INTO covi_approval4j.gov_series
			(
				  SeriesCode
				, SFCode
				, SeriesName
				, SeriesDescription
				, KeepPeriod
				, KeepPeriodReason
				, KeepMethod
				, KeepPlace
				, BaseGroupCode
				, BaseYear
				, JobType
			)
		VALUES
			(
				  #{SeriesCode}
				, #{SFCode} 
				, #{SeriesName}
				, #{SeriesDescription}
				, #{KeepPeriod}
				, #{KeepPeriodReason}
				, #{KeepMethod}
				, #{KeepPlace}
				, #{BaseGroupCode}
				, #{BaseYear}
				,'1'
			)
	</insert>
	
	<insert id="insertSeriesMappingData" parameterType="cmap">
		INSERT INTO covi_approval4j.gov_series_MAPPING
			(
				  SeriesCode
				, SeriesName
				, DeptCode
				, DeptName
				, BaseYear
				, JobType
				, SyncStatus
				, ProcessDateTime
				, ApplyDate
				, RegistDate
				, RegisterID
			)
			<choose>
				<when test="UnitTaskType == 'ZA'">
					VALUES
						(
							  #{SeriesCode}
							, #{SeriesName}
							, 'Total'
							, '기관 공통'
							, #{BaseYear}
							, '1'
							, 'N'
							, DATE_FORMAT(now(), '%Y%m%d%H%i')
							, DATE_FORMAT(now(), '%Y%m%d')
							, DATE_FORMAT(now(), '%Y%m%d')
							, #{userCode}
						)
				</when>
				<otherwise> <!-- 고유 -->
					VALUES
						(
							  #{SeriesCode}
							, #{SeriesName}
							, #{DeptCode}
							, #{DeptName}
							, #{BaseYear}
							, '1'
							, 'N'
							, DATE_FORMAT(now(), '%Y%m%d%H%i')
							, DATE_FORMAT(now(), '%Y%m%d')
							, DATE_FORMAT(now(), '%Y%m%d')
							, #{userCode}
						)
				</otherwise>
			</choose>
	</insert>
	
	<insert id="insertSeriesByExcel" parameterType="cmap">
		INSERT INTO covi_approval4j.gov_series (SeriesCode, SFCode, TempSeriesCode, SeriesName, SeriesDescription, KeepPeriod, KeepPeriodReason, KeepMethod, KeepPlace, BaseGroupCode, BaseYear)
		VALUES
		<foreach collection="dataList" item="item" separator=",">
			(#{item.SeriesCode}, #{item.SmallFunctionCode}, #{item.TempSeriesCode}, #{item.SeriesName}, #{item.SeriesDescription}, LPAD(#{item.KeepPeriod}, 2, '0'), #{item.KeepPeriodReason}, #{item.KeepMethod}, #{item.KeepPlace}, #{item.DeptCode}, #{item.BaseYear})
		</foreach>
		ON DUPLICATE KEY UPDATE
			SFCode = VALUES(SFCode),
			TempSeriesCode = VALUES(TempSeriesCode),
			SeriesName = VALUES(SeriesName),
			SeriesDescription = VALUES(SeriesDescription),
			KeepPeriod = VALUES(KeepPeriod),
			KeepPeriodReason = VALUES(KeepPeriodReason),
			KeepMethod = VALUES(KeepMethod),
			KeepPlace = VALUES(KeepPlace),
			BaseGroupCode = VALUES(BaseGroupCode);
	</insert>
	
	<insert id="insertSeriesMappingByExcel" parameterType="cmap">
		INSERT INTO covi_approval4j.gov_series_MAPPING (SeriesCode, SeriesName, DeptCode, DeptName, BaseYear, JobType, ApplyDate, ProcessDateTime)
			VALUES
			<foreach collection="dataList" item="item" separator=",">
			    (#{item.SeriesCode}, #{item.SeriesName}, #{item.DeptCode}, #{item.DeptName}, #{item.BaseYear}, #{item.JobType}, #{item.ApplyDate}, #{item.ProcessDateTime})
			</foreach>
			ON DUPLICATE KEY UPDATE
			    SeriesName = VALUES(SeriesName),
			    DeptName = VALUES(DeptName),
			    JobType = VALUES(JobType),
			    ApplyDate = VALUES(ApplyDate),
			    ProcessDateTime = VALUES(ProcessDateTime);
	</insert>
	
	<insert id="insertSeriesFuncByExcel" parameterType="cmap">
		INSERT INTO covi_approval4j.gov_series_FUNC (FunctionCode, FunctionName, FunctionLevel, ParentFunctionCode)
		SELECT #{FunctionCode}, #{FunctionName}, #{FunctionLevel}, #{ParentFunctionCode}
		FROM DUAL
		WHERE NOT EXISTS (
		    SELECT 1
		    FROM covi_approval4j.gov_series_FUNC
		    WHERE FunctionCode = #{FunctionCode}
		);
	</insert>
	
	<update id="updateSeriesData" parameterType="cmap">
		UPDATE covi_approval4j.gov_series
		SET	  SeriesName = #{SeriesName}
			, SeriesDescription = #{SeriesDescription}
			, SFCode = #{SFCode}
			, KeepPeriod = #{KeepPeriod}
			, KeepPeriodReason = #{KeepPeriodReason}
			, KeepMethod = #{KeepMethod}
			, KeepPlace = #{KeepPlace}
			, BaseGroupCode = #{DeptCode}
			, BaseYear = #{BaseYear}
		WHERE SeriesCode = #{SeriesCode}
	</update> 
	
	<update id="updateSeriesMappingData" parameterType="cmap">
		UPDATE covi_approval4j.gov_series_MAPPING
		SET	  DeptCode = #{DeptCode}
			, DeptName = #{DeptName}
			, JobType = '3'
			, ModifyDate = DATE_FORMAT(now(), '%Y%m%d')
			, ModifyReason = #{ModifyReason}
			, ModifierID = #{userCode}
			, ApplyDate = DATE_FORMAT(now(), '%Y%m%d')
			, BaseYear = #{BaseYear}
			, ProcessDateTime = DATE_FORMAT(now(), '%Y%m%d%H%i')
		WHERE 1 = 1
		AND MAPPINGID = #{MappingID}
	</update>
	
	<update id="updateMappingSeriesNameData" parameterType="cmap">
		UPDATE covi_approval4j.gov_series_MAPPING
		SET	  SeriesName = #{SeriesName}
		WHERE SeriesCode = #{SeriesCode}
	</update>  
	
	<update id="updateRevokeSeries" parameterType="cmap">
		UPDATE covi_approval4j.gov_series_MAPPING
		SET	  JobType = '2'
			, ApplyDate = DATE_FORMAT(now(), '%Y%m%d')
			, ProcessDateTime = DATE_FORMAT(now(), '%Y%m%d%H%i')
			, AbolitionReason = #{AbolitionReason}
		WHERE SeriesCode = #{SeriesCode}
		AND DeptCode = #{DeptCode}
		AND BaseYear = #{BaseYear}
	</update> 
	
	<update id="updateRevokeDeleteData" parameterType="cmap">
		UPDATE covi_approval4j.gov_series GS 
		SET GS.JobType = '2'
		  , GS.ApplyDate = DATE_FORMAT(now(), '%Y%m%d')
		  , GS.ProcessDateTime = DATE_FORMAT(now(), '%Y%m%d%H%i')
		  , GS.AbolitionReason = #{AbolitionReason}
		WHERE GS.BASEYEAR = #{BaseYear} AND GS.SeriesCode = #{SeriesCode}
		AND NOT EXISTS (
			SELECT 1 FROM covi_approval4j.gov_series_MAPPING GSM 
			WHERE GSM.SeriesCode = #{SeriesCode} AND GSM.BASEYEAR = #{BaseYear} AND GSM.JOBTYPE != '2'
		)
	</update> 
	
	<update id="updateRestoreSeries" parameterType="cmap">
		UPDATE covi_approval4j.gov_series_MAPPING
		SET	  JobType = '1'
			, ApplyDate = DATE_FORMAT(now(), '%Y%m%d')
			, ProcessDateTime = DATE_FORMAT(now(), '%Y%m%d%H%i')
			, AbolitionReason = NULL
		WHERE SeriesCode = #{SeriesCode}
		AND DeptCode = #{DeptCode}
		AND BaseYear = #{BaseYear}
	</update> 
	
	<update id="updateRestoreData" parameterType="cmap">
		UPDATE covi_approval4j.gov_series GS 
		SET GS.JobType = '1'
		  , GS.ApplyDate = DATE_FORMAT(now(), '%Y%m%d')
		  , GS.ProcessDateTime = DATE_FORMAT(now(), '%Y%m%d%H%i')
		  , GS.AbolitionReason = NULL
		WHERE GS.BASEYEAR = #{BaseYear} AND GS.SeriesCode = #{SeriesCode}
		AND EXISTS (
			SELECT 1 FROM covi_approval4j.gov_series_MAPPING GSM 
			WHERE GSM.SeriesCode = #{SeriesCode} AND GSM.BASEYEAR = #{BaseYear} AND GSM.JOBTYPE = '2'
		)
	</update>
	
	<select id="selectSeriesCode" parameterType="cmap" resultType="String">
		SELECT GS.SeriesCode
		FROM (
			SELECT SeriesCode
			FROM covi_approval4j.gov_series 
			WHERE SeriesCode LIKE CONCAT('%', #{gubun}, '%')
			ORDER BY SeriesCode DESC
			LIMIT 1	
		) GS	
	</select>
	
	<select id="selectSeriesPathCnt" parameterType="cmap" resultType="int">
		SELECT COUNT(*) FROM covi_approval4j.gov_series_FUNC
		WHERE FunctionCode = #{SeriesCode}
	</select>
	
	<select id="selectSeriesPath" parameterType="cmap" resultType="String">
		SELECT * FROM (
		    SELECT TRIM(LEADING ' > ' FROM GROUP_CONCAT(GSF.FunctionName ORDER BY GSF.FunctionLevel SEPARATOR ' > ')) AS SeriesPath
		    FROM covi_approval4j.gov_series_FUNC GSF
		    <if test="FunctionCnt == 0">
		        LEFT JOIN covi_approval4j.gov_series GS ON GS.SFCode = GSF.FunctionCode
		    </if>
		    WHERE GSF.FunctionLevel = '3'
		    <choose>
		        <when test="FunctionCnt == 0">
		            AND GS.SeriesCode = #{SeriesCode}
		        </when>
	        <otherwise>
	            AND GSF.FunctionCode = #{SeriesCode}
	        </otherwise>
	    </choose>
	    GROUP BY GSF.FunctionCode
	    ) A
	    LIMIT 1;
	</select>
	
	<update id="updateSyncSeries" parameterType="cmap">
		INSERT INTO covi_approval4j.gov_series_MAPPING (
		    SeriesCode,
		    SeriesName,
		    DeptCode,
		    DeptName,
		    BaseYear,
		    JobType,
		    SyncStatus,
		    RegisterID,
		    RegistDate,
		    ProcessDateTime,
		    ApplyDate
		)
		SELECT
		    GS.SeriesCode,
		    GS.SeriesName,
		    SOG.GroupCode AS DeptCode,
		    SOG.DisplayName AS DeptName,
		    GS.BaseYear,
		    GSM.JobType,
		    GSM.SyncStatus,
		    GSM.RegisterID,
		    DATE_FORMAT(NOW(), '%Y%m%d') AS RegistDate,
		    DATE_FORMAT(NOW(), '%Y%m%d%H%i') AS ProcessDateTime,
		    DATE_FORMAT(NOW(), '%Y%m%d') AS ApplyDate
		FROM covi_smart4j.sys_object_group SOG
		LEFT OUTER JOIN covi_approval4j.gov_series GS ON SUBSTRING(GS.SeriesCode, 1, 2) IN ('ZZ', 'ZA')
		LEFT OUTER JOIN covi_approval4j.gov_series_MAPPING GSM ON GS.SeriesCode = GSM.SeriesCode AND GS.BaseYear = GSM.BaseYear
		WHERE GS.BaseYear = ? 
		  AND SOG.IsUse = 'Y'
		  AND SOG.IsDisplay = 'Y'
		  AND (SOG.MemberOf != 'NOUSE' OR SOG.MemberOf IS NULL)
		  AND (SOG.MemberOf != 'NOUNIT' OR SOG.MemberOf IS NULL)
		  AND SOG.GroupType IN ('Dept', 'Company')
		  AND NOT EXISTS (
		      SELECT 1
		      FROM covi_approval4j.gov_series_MAPPING GSM_SUB
		      WHERE GSM_SUB.SeriesCode = GS.SeriesCode AND GS.BaseYear = GSM_SUB.BaseYear
		  )
		  AND (
		      (SUBSTRING(GS.SeriesCode, 1, 2) = 'ZZ' AND SOG.GroupPath LIKE CONCAT('%;', GS.BaseGroupCode , ';%'))
		      OR
		      (SUBSTRING(GS.SeriesCode, 1, 2) = 'ZA' AND SOG.CompanyCode = GS.BaseGroupCode)
		  )
		ON DUPLICATE KEY UPDATE
		    SeriesName = VALUES(SeriesName),
		    DeptCode = VALUES(DeptCode),
		    DeptName = VALUES(DeptName),
		    BaseYear = VALUES(BaseYear),
		    JobType = VALUES(JobType),
		    SyncStatus = VALUES(SyncStatus),
		    RegisterID = VALUES(RegisterID),
		    RegistDate = VALUES(RegistDate),
		    ProcessDateTime = VALUES(ProcessDateTime),
		    ApplyDate = VALUES(ApplyDate)
	</update>
	
	<insert id="insertSeriesByYear" parameterType="cmap">
		INSERT INTO covi_approval4j.gov_series (
		    SeriesCode,
		    SFCode,
		    SeriesName,
		    SeriesDescription,
		    KeepPeriod,
		    KeepPeriodReason,
		    KeepMethod,
		    KeepPlace,
		    BaseGroupCode,
		    BaseYear,
		    TempSeriesCode,
		    ProvisionRecordStatus,
		    ExpectedFrequency,
		    OpenPurpose,
		    SpecialListLocation,
		    JobType,
		    SyncStatus,
		    ProcessDateTime,
		    ApplyDate,
		    RegistDate,
		    RegisterID
		)
		SELECT DISTINCT GS.SeriesCode,
		                GS.SFCode,
		                GS.SeriesName,
		                GS.SeriesDescription,
		                GS.KeepPeriod,
		                GS.KeepPeriodReason,
		                GS.KeepMethod,
		                GS.KeepPlace,
		                GS.BaseGroupCode,
		                #{BaseYear} AS BaseYear,
		                GS.TempSeriesCode,
		                GS.ProvisionRecordStatus,
		                GS.ExpectedFrequency,
		                GS.OpenPurpose,
		                GS.SpecialListLocation,
		                GS.JobType,
		                GS.SyncStatus,
		                DATE_FORMAT(NOW(), '%Y%m%d%H%i') AS ProcessDateTime,
		                DATE_FORMAT(NOW(), '%Y%m%d') AS ApplyDate,
		                DATE_FORMAT(now(), '%Y%m%d') AS RegistDate,
		                GS.RegisterID
		FROM covi_approval4j.gov_series GS
		LEFT OUTER JOIN covi_approval4j.gov_series_MAPPING GSM ON GS.SeriesCode = GSM.SeriesCode AND GS.BaseYear = GSM.BaseYear
		WHERE GS.BaseYear = #{BaseYear} - 1 AND GSM.JobType != '2'
		ON DUPLICATE KEY UPDATE
		    SeriesCode = VALUES(SeriesCode),
		    SFCode = VALUES(SFCode),
		    SeriesName = VALUES(SeriesName),
		    SeriesDescription = VALUES(SeriesDescription),
		    KeepPeriod = VALUES(KeepPeriod),
		    KeepPeriodReason = VALUES(KeepPeriodReason),
		    KeepMethod = VALUES(KeepMethod),
		    KeepPlace = VALUES(KeepPlace),
		    BaseGroupCode = VALUES(BaseGroupCode),
		    BaseYear = VALUES(BaseYear),
		    TempSeriesCode = VALUES(TempSeriesCode),
		    ProvisionRecordStatus = VALUES(ProvisionRecordStatus),
		    ExpectedFrequency = VALUES(ExpectedFrequency),
		    OpenPurpose = VALUES(OpenPurpose),
		    SpecialListLocation = VALUES(SpecialListLocation),
		    JobType = VALUES(JobType),
		    SyncStatus = VALUES(SyncStatus),
		    ProcessDateTime = VALUES(ProcessDateTime),
		    ApplyDate = VALUES(ApplyDate),
		    RegistDate = VALUES(RegistDate),
		    RegisterID = VALUES(RegisterID)
	</insert>
	
	<insert id="insertSeriesMappingByYear" parameterType="cmap">
		INSERT INTO covi_approval4j.gov_series_MAPPING (
			    SeriesCode,
			    SeriesName,
			    DeptCode,
			    DeptName,
			    BaseYear,
			    JobType,
			    SyncStatus,
			    RegisterID,
			    RegistDate,
			    ApplyDate,
			    ProcessDateTime
			)
			SELECT GSM.SeriesCode,
			       GSM.SeriesName,
			       GSM.DeptCode,
			       GSM.DeptName,
			       #{BaseYear} AS BaseYear,
			       GSM.JobType,
			       'N' AS SyncStatus,
			       GSM.RegisterID,
			       DATE_FORMAT(NOW(), '%Y%m%d') AS RegistDate,
			       DATE_FORMAT(NOW(), '%Y%m%d') AS ApplyDate,
			       DATE_FORMAT(NOW(), '%Y%m%d%H%i') AS ProcessDateTime
			FROM covi_approval4j.gov_series_MAPPING GSM
			WHERE GSM.BaseYear = #{BaseYear} - 1 AND GSM.JobType != '2'
			ON DUPLICATE KEY UPDATE
			    SeriesName = VALUES(SeriesName),
			    DeptCode = VALUES(DeptCode),
			    DeptName = VALUES(DeptName),
			    BaseYear = VALUES(BaseYear),
			    JobType = VALUES(JobType),
			    SyncStatus = VALUES(SyncStatus),
			    RegisterID = VALUES(RegisterID),
			    RegistDate = VALUES(RegistDate),
			    ApplyDate = VALUES(ApplyDate),
			    ProcessDateTime = VALUES(ProcessDateTime);
	</insert>
</mapper>